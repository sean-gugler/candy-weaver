!unit_test
!color_test

gosub @declare_vars

'Copyright 2022 by Sean Gugler
'licensed under CC BY-NC-SA 4.0

t1$="Candy Weaver"
t2$="Version 1.0.0 2022-08-31"
t3$="by Sean Gugler"
t4$="------------------"


# individual unit_test cases
#gosub @test_shuffle:end
#gosub @test_color_clash
#gosub @print_color_clash
#gosub @test_color_palette
#end

t=1
:gosub @welcome
:gosub @init_data

@@menu_loop
home
:t=0
:gosub @welcome
gosub @menu
goto @@menu_loop


#----------
@challenge
'--- Play challenge waves

gosub @seed_rnd

for r=0 to dn-1
w=dw(r)
:h=dh(r)
:cn=dc(r)
:ts=dt(r)

if not ts then @@setup_board
home
:flash
:vtab 22
t$="*** Timed Round! ***"
:gosub @print_centered
normal
:gosub @key_continue

@@setup_board
gosub @setup_goal
:gosub @draw_help
gosub @play_game
:if tx=-1 then return

if tx<>40 then @@next_round
#print "final score: ";m
print "Better luck next time!"
gosub @key_continue
return

@@next_round
gosub @key_continue
next

goto @end_game

#----------
@setup_goal
'--- Layout a new weave
# arg: w,h width and height of weave
# arg: cn number of colors
# arg: ts timer speed
# return: x,y position of player's weave
# init: ti timer counter
# init: tx timer x position
# init: ci selected color (index into palette)
# init: cp previously selected color (index)
# init: bi selected bar (stripe index)
# init: bp previously selected bar (index)

# max values allowed:
# w=8, h=9, cn=9
x=9-w
:y=20-h
:m=w*h
:gosub @init_check
ti=0
:tx=0

# setup_board
gr
:home
#unit_test
#gosub @test_row:end

:gosub @gen_palette
:gosub @draw_border
:gosub @draw_patch

x=x+20
:gosub @draw_border
home
:print "Available flavors:"
:gosub @draw_color_palette
cp=1
:ci=0
:gosub @select_color

bp=1
:bi=0
:gosub @select_stripe

if ts then color=4
:hlin 0,39 at 0

return

#----------
@draw_abort
'--- Abort prompt

vtab 22
:htab 1
:call(-868)
htab 24
:print "Abandon game?"
call(-868)
return


#----------
@draw_help
'--- Help text

vtab 22
:htab 1

if ax then @@help_axes
call(-868)
:print " Aim: left/right";
htab 24
:print "[T]oggle labels"
call(-868)
:print " Lay candy: Space";
return


@@help_axes
# arg: w,h patch size
call(-868)
:print "Press a letter";

htab x-3
:print "COL:";
for i=0 to w-1
:print " ";chr$(65+i);
:next

print
:call(-868)
:print "to fast-stripe";

htab 26-h
:print "ROW:";
for i=w to w+h-1
:print " ";chr$(65+i);
:next

return


#----------
@welcome
'--- Welcome
text
:home
t$=t2$:gosub @print_centered
t$=t3$:gosub @print_centered
print
t$=t4$:gosub @print_centered
if t then flash
t$=t1$:gosub @print_centered:normal
t$=t4$:gosub @print_centered
return

#----------
@menu
'--- Main menu
print
#print "  Watch a [D]emo"
print " View the [D]emo"
print " Take the [T]utorial"
#print " Play the [S]corecard challenge"
#print "Start the [S]corecard challenge"
#print " Play for [S]core, win big!"
print " Play the [P]rogression challenge"
#print "   Casual [P]lay / practice"
#print "Weave and [C]hill for practice"
#print "    Weave [C]asually for practice"
#print "   Design [C]asual weaves"
#print "     Play [C]asually, practice"
#print "  Play to [C]hill or practice"
#print " Practice [C]ustomized weaves"
print " Practice [S]pecific weaves"
print
#print "What next? ";
print " Where to? ";
@@menu_input
get ch$

if asc(ch$)=27 then end
:rem esc

if ch$="D" then gosub @demo
:return

if ch$="T" then gosub @tutorial
:return

if ch$="S" then gosub @practice
:return

if ch$="P" then gosub @challenge
:return

goto @@menu_input

#----------
@print_centered
'--- Print Centered
# arg: t$ the string to center

htab 20-len(t$)/2
:print t$
:return

#----------
@key_continue
'--- Prompt to continue
vtab 24
:htab 27
:print "Press space:";
:get ch$
:return

#----------
@tutorial
'--- Tutorial

ap=ax
:ax=0

w=3
:h=3
:cn=6
:ts=0
:tx=0
x=9-w
:y=20-h
:gosub @init_check

gr
:home
print "Welcome to the wonderful world of"
print "candy weaving!"
gosub @key_continue

@@tutorial_generate
t=rnd(seed)

home
:gosub @draw_border
:gosub @gen_palette
:gosub @draw_patch
print "Above, on the left, you will see"
print "a tasty target pattern."
#print "seed ";seed
gosub @key_continue
if ch$="r" then seed=seed-1
:goto @@tutorial_generate

home
:x=x+20
:gosub @draw_border
print "On the right, you will lay candy"
print "stripes one at a time until your"
print "whole pattern matches the target."
gosub @key_continue

home
print "First: select"
gosub @draw_color_palette
print "a flavor of candy"
print "by pressing its number";

@@tutorial_color
gosub @input_key
:ci=ch-49
:if ci<0 or ci>=cn then @@tutorial_color
cp=not(ci-1)+1

home
:gosub @draw_color_palette
:gosub @select_color
print "Next: press the right arrow"
print "to move the candy hose."
bi=0
:gosub @select_stripe

@@tutorial_aim
gosub @input_key
:if ch<>21 then @@tutorial_aim
vtab 24
:htab 1
:print "Keep going! Watch how it wraps...";
gosub @aim_right
:if bi<>0 then @@tutorial_aim

home
:gosub @draw_color_palette
:cp=not ci
:gosub @select_color
print "Use left and right arrows to aim, then"
print "Press space to lay down a candy stripe."

@@tutorial_stripe
gosub @input_key
if ch=11 or ch=8 then gosub @aim_left
if ch=10 or ch=21 then gosub @aim_right
if ch<>32 then @@tutorial_stripe
:rem space
gosub @draw_bar

home
print "Continue laying"
print "candy stripes until"
print "the patterns match exactly"
gosub @draw_color_palette
:cp=not ci
:gosub @select_color

@play_tutorial
'--- Tutorial play loop
gosub @input_key

if ch=83 then return
:rem debug [S]kip

if ch=11 or ch=8 then gosub @aim_left
:goto @play_tutorial
:rem left

if ch=10 or ch=21 then gosub @aim_right
:goto @play_tutorial
:rem right

if ch=32 or ch=13 then @@tutorial_bar
:rem space, return

t=ch-49
:rem 1-9
if t<0 or t>=cn then @play_tutorial

ci=t
:gosub @select_color
:gosub @select_stripe
:goto @play_tutorial

@@tutorial_bar
gosub @select_stripe
:gosub @draw_bar

gosub @check_match
:if m then @play_tutorial

gosub @clear_stripe
vtab 24
:inverse
#:print "Congratulations!";
:print "I say; well done!";
:normal
:gosub @key_continue

ax=ap
return


#----------
@demo
'--- Demo loop
# use: ci,bi current color and bar indices
# use: i loop index
# use: t temporary value

### - Setup

w=5
:h=6
:cn=7
:ts=0

t=rnd(seed):rem predictable sequence
gosub @setup_goal

vtab 21
:print "Choose a flavor,  "
print "aim the candy hose,";
:htab 28:print "---DEMO---"
print "lay stripes, until the";
:htab 28:print "Press a key"
print "entire pattern matches";
:htab 29:print "to return";

### - Main loop

@@demo_loop
for i=1 to 60
if peek(ky)>=128 then get ch$
:return

if i<>20 then @@demo_color_end
@@demo_new_color
t=int(rnd(1)*cn)
:if t=ci then @@demo_new_color
ci=t
:gosub @select_color
:gosub @select_stripe
@@demo_color_end

if i<>40 then @@demo_aim_end
@@demo_new_aim
t=int(rnd(1)*(w+h))
:if t=bi then @@demo_new_aim
bi=t
:gosub @select_stripe
@@demo_aim_end

if i<>60 then @@demo_stripe_end
gosub @draw_bar
@@demo_stripe_end

next i
:goto @@demo_loop

#----------
@practice
'--- Practice Menu
# arg: t$ the string to center
# use: s() for temporary values

vtab 13
:htab 1
print "  Width (2-8): ";w
print " Height (2-9): ";h
print "Flavors (2-9): ";cn
print "  Timer (0-9): ";tv
print
htab 10:print "[Space] to begin"
htab 10:print "[ESC]   to cancel"
s(0)=w
:s(1)=h
:s(2)=cn
:s(3)=tv
:ts=0
:tx=0
i=0

@@practice_menu_mark_cursor
vtab 13+i
:htab 16
:inverse
:print s(i);
:normal

@@practice_menu_input
gosub @input_key
if ch=27 then return
:rem esc
if ch=32 then @@setup_practice
:rem space
if ch=13 then ch=s(i)+48
:rem return key

n=ch-48
:rem "0"
if n<(2 * (i<>3)) or n>(8 + (i<>0)) then @@practice_menu_input

s(i)=n
# unmark old cursor
htab 16
:print s(i)
i=i+1
:if i>3 then i=0

goto @@practice_menu_mark_cursor

@@setup_practice
w=s(0)
:h=s(1)
:cn=s(2)
:tv=s(3)
:ts=ta(tv)
:gosub @seed_rnd

@practice_round
'--- Play a practice round
gosub @setup_goal
:gosub @draw_help
gosub @play_game
:if tx=-1 then return

vtab 24
:htab 24
:print "Another round?";
@@practice_again
get ch$
if ch$="Y" or ch=13 then @practice_round
if ch$="N" or ch=27 then return
goto @@practice_again


#----------
@declare_vars
'--- Declare variables

# pre-declare performance-critical variables
# for @check_match
m=0
:i=0
:o=-20
:j=0
:a=0
:w=3
:h=3
:x=0
:y=0

ky=49152

cn=6
tv=0
# axis-labeled expert mode
ax=0

# predictable rnd() sequence for tutorial
# Some seeds I liked:
# -2,-7,-15,-18,-22,-25,-34,-46,-53,-55,-62,-76,-90,-97,-108,-131,-153,-170,-179,-182,-222
seed=-222

dim cc(15*5-1):rem color clash table
dim ro(24):rem gr mem addr by row
dim c(15):rem color palette
dim s(25):rem shuffle sequence
dim ta(9):rem timer presets
'level data
dim dw(30)
:dim dh(30)
:dim dc(30)
:dim dt(30)

return

#----------
@init_data
'--- Initialize game data

#dim ro(24):rem gr mem addr by row
for i=0 to 7
:for j=0 to 2
:ro(i+8*j)=1024+128*i+40*j
:next j
:next i

#dim ta(9):rem timer presets
for i=0 to 9
:read ta(i)
:next i

gosub @init_palette

#level data
#dim dw(30):dim dh(30):dim dc(30):dim dt(30)
read dn
:for i=0 to dn-1
:read dw(i),dh(i),dc(i),dt(i)
:next

return

#----------
@seed_rnd
'--- seed "rnd" from human reaction time
# These locations are a 16-byte counter
# incremented by the system during get$
i=rnd(-1*(peek(78)+256*peek(79)))
return

#----------
@draw_border
'--- Draw play area border
# arg: x,y,w,h GR rect coords

color=15
hlin x-1,x+w*2+1 at y-1
hlin x-1,x+w*2+1 at y+h*2+1
vlin y-1,y+h*2+1 at x-1
vlin y-1,y+h*2+1 at x+w*2+1
:return

#----------
@draw_color_palette
'--- Draw color palette
# arg: cn number of colors
# arg: c() array of colors
# use: i index

vtab 21
:htab 20

for i=0 to cn-1
:color=c(i)
:vlin 37,38 at 20+i*2
:print " ";i+1;
:next

print
:return

#----------
@select_color
'--- Show selected color
# arg: ci color index
# keep: cp previous color index

if ci=cp then return
vtab 21

:htab 21+ci*2
:inverse
:print ci+1;

:htab 21+cp*2
:normal
:print cp+1;

cp=ci
:print
:return

#----------
@clear_stripe
'--- Clear stripe indictor

color=0
:ba=bp
:gosub @draw_axis

gosub @draw_border
:return

#----------
@select_stripe
'--- Show selected stripe
# arg: bi bar index
# keep: bp previous bar index

gosub @clear_stripe

color=c(ci)
:ba=bi
:gosub @draw_axis

bp=bi
:return

#----------
@input_key
'--- Input key
# Does not show a flashing cursor.
# return: ch$ string of key that was pressed
# return: ch apple-ascii value of that key
ch$=""
:ch=0

@@input_wait
ti=ti+1
:if ti=ts then 
:color=9
:plot tx,0
:tx=tx+1
:ti=0
if tx=40 then return

if peek(ky)<128 then @@input_wait
get ch$
:ch = asc(ch$)
return

#----------
@aim_left
'--- Aim hose
bi=bi-1
:if bi<0 then bi=w+h-1
gosub @select_stripe
return

@aim_right
bi=bi+1
:if bi=w+h then bi=0
gosub @select_stripe
return

#----------
@play_game
'--- Main game loop
# use: c$ keyboard input
# use: ci color index
# use: bi bar index, @draw_bar
# use: t temporary value

gosub @input_key
if tx=40 then @@play_timeout

if ch=27 then @@ask_abort
:rem esc

if ch=11 or ch=8 then gosub @aim_left
:goto @play_game
:rem left

if ch=10 or ch=21 then gosub @aim_right
:goto @play_game
:rem right

if ch=32 or ch=13 then @@play_bar_current
:rem space, return

if ch=84 then ax=not ax
:gosub @draw_help
:goto @play_game
:rem toggle expert

if ch=82 then gosub @reveal_diffs
:goto @play_game
:rem reveal diffs

t=ch-49
:rem 1-9
if t>=0 and t<cn then @@play_color

t=ch-65
:rem A-Z
if t>=0 and t<w+h then @@play_bar

goto @play_game
:rem other

@@play_color
'- choose color
ci=t
:gosub @select_color
:gosub @select_stripe
:goto @play_game

@@play_bar
'- choose line
bi=t

@@play_bar_current
gosub @select_stripe
:gosub @draw_bar
vtab 24
:htab 1
:call(-868)
:print "Comparing...      ";
:htab 1
:gosub @check_match
if m then print "progress: ";m;" to go ";
:htab 24
:print "[R]eveal diffs";
:goto @play_game

gosub @clear_stripe
t=rnd(1)*3
:inverse
if t<1 then print "A perfect match!";
:goto @@round_over
if t<2 then print "Yes! Delicious!";
:goto @@round_over
print "Completed! (Yum)";
:goto @@round_over

@@ask_abort
gosub @draw_abort
@@input_abort
gosub @input_key
if tx=40 then @@play_timeout
if ch=78 or ch=27 then gosub @draw_help
:goto @play_game
:rem [N]o
if ch=89 then tx=-1
:home
:goto @@round_over
:rem [Y]es
if ch=83 then return
:rem debug [S]kip
goto @@input_abort

@@play_timeout
home
:flash
:print "Out of time!"

@@round_over
normal
:return


#----------
@init_check
'--- Init check variables

j0=(y+1)/2
:j1=j0+h-1
:w2=w*2

#----------
@check_match
'--- Check for match
# arg: x,y,w,h GR rect coords
# arg: ro() array of memory address for each row start
# arg: o constant -20 to find "other" pattern area
# return: m number remaining
# use: i,j indices
# use: a  temporary value

m=0

:for j=j0 to j1
a=ro(j)+x
:for i=a+1 to a+w2 step 2
m=m+(peek(i)=peek(i+o))
next i
:next j

m=(w*h-m)
return

#----------
@reveal_diffs
'--- Reveal differences
# arg: x,y,w,h GR rect coords
# arg: ro() array of memory address for each row start
# arg: o constant -20 to find "other" pattern area
# use: i,j indices
# use: p  temporary value

for j=j0 to j1
a=ro(j)+x
:for i=a+1 to a+w2 step 2

p=peek(i)
:if p=peek(i+o) then @@diff_next
poke(i),255
:for t=1 to 200:next
:poke(i),p
if peek(ky)>=128 then return

@@diff_next
next i
:next j
:return

#----------
@shuffle
'--- Create a shuffle 
# arg: sn length of shuffled sequence [1..26]
# use: i,j indices
# use: t temporary value

for i=0 to sn-1
:s(i)=i
:next

for i=sn-1 to 0 step -1
:j=rnd(1)*i
:t=s(i)
:s(i)=s(j)
:s(j)=t
:next

return

#----------
@shuffle_colors
'--- Shuffle color palette
# arg: cn number of colors
# use: i,j indices
# use: t temporary value

for i=cn-1 to 0 step -1
:j=rnd(1)*i
:t=c(i)
:c(i)=c(j)
:c(j)=t
:next

return

#----------
@init_palette
'--- Table of clashing colors
# return: cc() table of clashing colors
# use: i,j,k general index
# use: s() temporary 

# Data chosen by visual inspection of @test_color_clash
# in cyanIIde and multiple view modes on AppleWin
# severe: 5,10  7,10  7,11  7,14  10,11
# mild: 1,3  2,4  3,5  3,9  3,10  3,11  5,7  6,14  12,14

#dim cc(15*5-1)
for i=0 to 15
:s(i)=0
:next

for k=1 to 14
read i,j
n=s(i)
:cc(i*5+n)=j
:s(i)=n+1
n=s(j)
:cc(j*5+n)=i
:s(j)=n+1
next k

return

#----------
@gen_palette
'--- Generate color palette
# arg: cn number of colors
# arg: cc() table of clashing colors
# return: c() array of colors
# use: s(),n  shuffling array
# use: ci color index
# use: i,j,k general index
# use: t,a temporary value

m=0
:vtab 21
:print "Selecting flavors..."

@@palette_attempt
m=m+1
:if m=3 then print "Taste testing for quality..."

# seed the list of eligible colors
for n=0 to 13
:s(n)=n+1
:next

for ci=cn-1 to 0 step -1
if n<=ci then @@palette_attempt

# random pick
i=rnd(1)*n
k=s(i)
:c(ci)=k
n=n-1
:s(i)=s(n)

# eliminate clashing colors
k=k*5
for j=k to k+4
a=cc(j)
:t=(not a)*n
:if t then j=j+5
for i=t to n-1
if a=s(i) then n=n-1
:s(i)=s(n)
:i=n
next i
next j

@@next_pick
next ci

return

#----------
@draw_patch
'--- Draw patch
# arg: x,y,w,h GR rect coords
# use: sn @shuffle
# use: ci color index
# use: bi bar index, @draw_bar
# use: i index

sn=w+h
:gosub @shuffle

ci=0
for i=0 to w+h-1

:bi=s(i)
:gosub @draw_bar

ci=ci+1
:if ci=cn then ci=0

next i

gosub @shuffle_colors
return

#----------
@draw_bar
'--- Draw a single bar
# arg: bi  bar number from 0 to w+h-1
# arg: ci  color index
# 0..w-1 are vlin, remainder are hlin

color=c(ci)
if bi<w then vlin y,y+h*2 at 1+x+bi*2
:return
hlin x,x+w*2 at 1+y+(bi-w)*2
:return

#if bi<h then hlin x,x+w*2 at 1+y+bi*2
#:return
#vlin y,y+h*2 at 1+x+(bi-h)*2
#:return

#----------
@draw_axis
'--- Draw axis indicator
# arg: ba  bar axis number from 0 to w+h-1
# use: t temporary value

if ba<w then vlin y-3,y-1 at 1+x+ba*2
:return
t=x+w*2+1
:hlin t,t+1 at 1+y+(ba-w)*2
:return

#----------
@end_game
'--- Game over

text
:home
:inverse
t$="Congratulations!":gosub @print_centered
normal
:vtab 4
:print "You've woven all the candy"
print
:print "you are a master candy weaver!"
print
end



{color_test
#----------
@test_color_clash
dim ct(39)
i=0

for c1=1 to 13
for c2=c1+1 to 14

# draw interleaved band of c1|c2|c1|c2
if i=0 then gr:home
print c1;" ";c2;"  ";
ct(i*5+1)=c1
ct(i*5+2)=c2
ct(i*5+3)=c1
ct(i*5+4)=c2
i=i+1

if i<8 then @@test_next_color
for i=0 to 39
:color=ct(i)
:vlin 0,39 at i
:next
gosub @key_continue
i=0

@@test_next_color
next c2
next c1

for j=0 to i*5
:color=ct(j)
:vlin 0,39 at j
:next
end

}color_test


{unit_test

#----------
@test_shuffle
sn=4
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn=16
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn=1
gosub @shuffle:gosub @print_shuffle
#sn=0
#gosub @shuffle:gosub @print_shuffle
return
@print_shuffle
for i=0 to sn-1
:print(s(i));" ";
:next
:print
:return

#----------
@test_row
poke(ro(0),242)
poke(ro(0)+39,42)
poke(ro(1)+1,242)
poke(ro(2)+38,42)
poke(ro(8),242)
poke(ro(8)+39,42)
poke(ro(9)+1,242)
poke(ro(10)+38,42)
poke(ro(19),242)
poke(ro(19)+39,42)
return

#----------
@print_color_clash
print "color clash table"
for i=0 to 14
print i;": ";
for j=0 to 4
print cc(i*5+j);" ";
next j
print
next i
return

#----------
@test_color_palette
cn=9
for tt=1 to 10
:print cn;
:gosub @gen_palette
:print " ";
:next
return

}unit_test

# timer presets
data 0,90,80,70,60,50,40,30,20,10

# color clash
data 5,10 , 7,10 , 7,11 , 7,14 , 10,11
data 1,3 , 2,4 , 3,5 , 3,9 , 3,10 , 3,11 , 5,7 , 6,14 , 12,14

# campaign sequence
data 29
data 3,3,6,0 , 4,4,8,0 , 5,4,9,0 , 3,3,6,50
data 5,3,8,0 , 7,3,9,0 , 8,4,7,0 , 5,4,8,60
data 3,6,6,0 , 4,7,5,0 , 5,9,5,0 , 4,6,7,60
data 3,3,3,0 , 5,5,5,0 , 7,7,7,0 , 4,4,4,70
data 6,3,3,0 , 8,4,4,0 , 4,8,3,0 , 3,3,3,40
data 5,2,2,0 , 6,4,2,0 , 3,4,2,50
data 8,9,9,0 , 8,9,5,0 , 7,8,2,0 , 3,3,6,20
data 8,9,2,0 , 6,7,3,90
