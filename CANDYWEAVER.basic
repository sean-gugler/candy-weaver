!unit_test
!show_check

'Copyright 2022 by Sean Gugler
'licensed under CC BY-NC-SA 4.0

t1$="Candy Weaver"
t2$="v0.1.0 2022-08-11"
t3$="by Sean Gugler"
t4$="-----------------"


#unit_test
#gosub @test_shuffle:end

gosub @init_vars
gosub @welcome

# max values allowed:
# w=8, h=9, cn%=9

data 11 , 3,3,3 , 4,4,3 , 5,5,3 , 6,8,3 , 8,3,5 , 3,8,5 , 3,3,6 , 4,4,6 , 6,6,4 , 8,9,2 , 8,9,9

read n
for r=1 to n
:gosub @setup_goal
:gosub @play_game
:next

end


#----------
@setup_goal

read w,h,cn%
:x=9-w
:y=20-h

gr
#unit_test
#gosub @test_row:end

:gosub @gen_palette
:gosub @draw_border
:gosub @draw_patch

x=x+20
:gosub @draw_border
home
:print "Available flavors:"
:gosub @draw_color_palette
cp%=1
:ci%=0
:gosub @select_color

bp=1
:bi=0
:gosub @select_stripe
print " Aim: left/right"
print " Lay candy: Space"

return


#----------
@welcome
'--- Welcome
text
:home
t$=t2$:gosub @print_centered
t$=t3$:gosub @print_centered
print
t$=t4$:gosub @print_centered
t$=t1$:gosub @print_centered
t$=t4$:gosub @print_centered
print
print "First time? Press [I]"
print "for instructions. "
print
print "Otherwise, Press [P]"
print "to play!"
print

@@welcome_input
get ch$

if ch$="I" then gosub @tutorial
:goto @welcome

if ch$<>"P" then @@welcome_input

'seed "rnd" from human reaction time
i=rnd(-1*(peek(78)+256*peek(79)))

return


#----------
@print_centered
'--- Print Centered
# arg: t$ the string to center

htab 20-len(t$)/2
:print t$
:return

#----------
@key_continue
'--- Prompt to continue
vtab 24
:htab 27
:print "Press space:";
:get ch$
:return

#----------
@tutorial
'--- Tutorial

w=3
:h=3
:cn%=3
:x=9-w
:y=20-h

gr
:home
print "Welcome to the wonderful world of"
print "candy weaving!"
gosub @key_continue

# seeds evaluated:
# -2,-7,-15,-18,-22,-25,-34,-46,-53,-55,-62,-76,-90,-97,-108,-131,-153,-170,-179,-182,-222
seed=-222
@@tutorial_generate
t=rnd(seed):rem predictable sequence
home
:gosub @draw_border
:gosub @gen_palette
:gosub @draw_patch
print "Above, on the left, you will see"
print "a tasty target pattern."
#print "seed ";seed
gosub @key_continue
#if ch$="r" then seed=seed-1
#:goto @@tutorial_generate

home
:x=x+20
:gosub @draw_border
print "On the right, you will lay candy"
print "stripes one at a time until they"
print "match the pattern."
gosub @key_continue

home
print "First, select"
gosub @draw_color_palette
print "a flavor of candy"
print "by pressing its number";

@@tutorial_color
gosub @input_key
:ci%=ch-49
:if ci%<0 or ci%>=cn% then @@tutorial_color

home
:gosub @draw_color_palette
:cp%=not(ci%-1)+1
:gosub @select_color
print "Next, use left and right arrows to"
print "aim the candy hose. Try it out!"
t=0
:bi=2
:gosub @select_stripe

@@tutorial_aim
gosub @input_key

if ch=8 then t=t+1
:gosub @aim_left
:rem left

if ch=21 then t=t+1
:gosub @aim_right
:rem right

if t<5 then @@tutorial_aim
if t=5 then print "Press space to lay down a candy stripe.";
if ch<>32 then @@tutorial_aim
:rem space
gosub @draw_bar

home
print "Continue laying"
print "candy stripes until"
print "the pattern matches!"
vtab 22:htab 30:print"Press"
vtab 23:htab 30:print"[P]lay"
vtab 24:htab 30:print"[M]enu";

@@tutorial_demo
if peek(49152)>=128 then return

ci%=int(rnd(1)*cn%)
:gosub @select_color

bi=int(rnd(1)*(w+h))
:gosub @select_stripe
:gosub @draw_bar

for t=1 to 500:next
goto @@tutorial_demo


#----------
@init_vars
'--- Initialize variables
dim c(15)
dim s(25)

dim ro(24):rem gr mem addr by row
for n=0 to 7
:for m=0 to 2
:ro(n+8*m)=1024+128*n+40*m
:next m
:next n

return

#----------
@draw_border
'--- Draw play area border
# arg: x,y,w,h GR rect coords

color=15
hlin x-1,x+w*2+1 at y-1
hlin x-1,x+w*2+1 at y+h*2+1
vlin y-1,y+h*2+1 at x-1
vlin y-1,y+h*2+1 at x+w*2+1
:return

#----------
@draw_color_palette
'--- Draw color palette
# arg: cn% number of colors
# arg: c() array of colors
# use: i index

vtab 21
:htab 20

for i=0 to cn%-1
:color=c(i)
:vlin 37,38 at 20+i*2
:print " ";i+1;
:next

print
:return

# arg: w,h patch size
print "Lay a candy stripe:"
:htab x-h*2
:print "(";
for i=0 to h-1
:if i>0 then print " ";
print chr$(65+i);
:next
:print ")";
for i=h to w+h-1
:print " ";chr$(65+i);
:next

return

#----------
@select_color
'--- Show selected color
# arg: ci% color index
# keep: cp% previous color index

if ci%=cp% then return
vtab 21

:htab 21+ci%*2
:inverse
:print ci%+1;

:htab 21+cp%*2
:normal
:print cp%+1;

cp%=ci%
:print
:return

#----------
@select_stripe
'--- Show selected stripe
# arg: bi bar index
# keep: bp previous bar index

color=0
:ba=bp
:gosub @draw_axis

gosub @draw_border

color=c(ci%)
:ba=bi
:gosub @draw_axis

bp=bi
:return

#----------
@input_key
'--- Input key
# Does not show a flashing cursor.
# return: ch$ string of key that was pressed
# return: ch apple-ascii value of that key

wait 49152,128
:get ch$
:ch = asc(ch$)
return

#----------
@aim_left
'--- Aim hose
bi=bi-1
:if bi<0 then bi=w+h-1
gosub @select_stripe
return

@aim_right
bi=bi+1
:if bi=w+h then bi=0
gosub @select_stripe
return

#----------
@play_game
'--- Main game loop
# use: c$ keyboard input
# use: ci% color index
# use: bi bar index, @draw_bar
# use: t temporary value

gosub @input_key

if ch=83 then return
:rem debug [S]kip

if ch=8 then gosub @aim_left
:goto @play_game
:rem left

if ch=21 then gosub @aim_right
:goto @play_game
:rem right

if ch=32 then @@play_bar_current
:rem space

t=ch-49
:rem 1-9
if t>=0 and t<cn% then @@play_color

t=ch-65
:rem A-Z
if t>=0 and t<w+h then @@play_bar

goto @play_game
:rem other

@@play_color
'- choose color
ci%=t
:gosub @select_color
:gosub @select_stripe
:goto @play_game

@@play_bar
'- choose line
bi=t

@@play_bar_current
gosub @select_stripe
:gosub @draw_bar
:gosub @check_match
if ma% then print ma%;" mismatch  ";
:goto @play_game

t=rnd(1)*3
:inverse
if t<1 then print "A perfect match!";
:goto @@round_over
if t<2 then print "Delicious!";
:goto @@round_over
print "Completed! (Yum)";
@@round_over
normal
:gosub @key_continue
:return

#----------
@check_match
'--- Check for match
# arg: x,y,w,h GR rect coords
# arg: ro() array of memory address for each row start
# return: ma% number remaining
# use: i,j indices
# use: y2 temp var

vtab 24
:htab 1
:print "Comparing...";
:htab 1

ma%=0

y2=int((y+1)/2)
:for j=y2 to y2+h-1
a=ro(j)+x
:for i=a+1 to a+(w*2) step 2

ma%=ma%+(peek(i)=peek(i-20))

{show_check
p=peek(i)
poke(i),255
for t=1 to 80:next
poke(i),p
}show_check

next i
:next j


ma%=(w*h-ma%)
return

#----------
@shuffle
'--- Create a shuffle 
# arg: sn% length of shuffled sequence [1..26]
# use: i,j indices
# use: t temporary value

for i=0 to sn%-1
:s(i)=i
:next

for i=sn%-1 to 0 step -1
:j=rnd(1)*i
:t=s(i)
:s(i)=s(j)
:s(j)=t
:next

return

#----------
@gen_palette
'--- Generate color palette
# arg: cn number of colors
# use: ci color index
# use: sn%, @shuffle
# use: i shuffle index, to skip colors that are hard to distinguish
# use: t temporary value

sn%=15
:gosub @shuffle

i=0
:for ci=0 to cn%-1

@@reject_color
t=s(i)
:i=i+1
:if t=0 or t=3 or t=5 or t=10 then @@reject_color

c(ci)=t
:next
:return

#----------
@draw_patch
'--- Draw patch
# arg: x,y,w,h GR rect coords
# use: sn% @shuffle
# use: ci% color index
# use: bi bar index, @draw_bar
# use: i index

sn%=w+h
:gosub @shuffle

ci%=0
for i=0 to w+h-1

:bi=s(i)
:gosub @draw_bar

ci%=ci%+1
:if ci%=cn% then ci%=0

next i

return

#----------
@draw_bar
'--- Draw a single bar
# arg: bi  bar number from 0 to w+h-1
# arg: ci%  color index
# 0..w-1 are vlin, remainder are hlin

color=c(ci%)
if bi<w then vlin y,y+h*2 at 1+x+bi*2
:return
hlin x,x+w*2 at 1+y+(bi-w)*2
:return

#if bi<h then hlin x,x+w*2 at 1+y+bi*2
#:return
#vlin y,y+h*2 at 1+x+(bi-h)*2
#:return

#----------
@draw_axis
'--- Draw axis indicator
# arg: ba  bar axis number from 0 to w+h-1
# use: t temporary value

if ba<w then vlin y-3,y-1 at 1+x+ba*2
:return
t=x+w*2+1
:hlin t,t+1 at 1+y+(ba-w)*2
:return



{unit_test

#----------
@test_shuffle
sn%=4
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=16
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=1
gosub @shuffle:gosub @print_shuffle
#sn%=0
#gosub @shuffle:gosub @print_shuffle
return
@print_shuffle
for i=0 to sn%-1
:print(s(i));" ";
:next
:print
:return

#----------
@test_row
poke(ro(0),242)
poke(ro(0)+39,42)
poke(ro(1)+1,242)
poke(ro(2)+38,42)
poke(ro(8),242)
poke(ro(8)+39,42)
poke(ro(9)+1,242)
poke(ro(10)+38,42)
poke(ro(19),242)
poke(ro(19)+39,42)
return

}unit_test
