gosub @declare_vars

'Copyright 2022 by Sean Gugler
'licensed under CC BY-NC-SA 4.0

t1$="Candy Weaver"
t2$="Version 1.0.2 2022-09-17"
t3$="by Sean Gugler"
t4$="------------------"


!unit_test
!color_test

`ZERO=z
`ONE=u
`INF=f
`ERASE_LINE=e

#----------
#TESTS
#
#gosub @init_data
#
# individual unit_test cases
#gosub @test_shuffle:end
#gosub @print_color_clash:end
#gosub @test_color_palette:end
#gr:gosub @test_row:end
#
# individual color_test cases
#gosub @test_color_clash:end
#----------

goto @main


#-------------------------------------
# HIGH-PERFORMANCE SUBROUTINES
#-------------------------------------

#----------
@input_key
'--- Input key
# Does not show a flashing cursor.
#
# arg: ts timer speed; higher is slower
# keep: ti timer increment
# keep: tx timer bar x-coordinate
# use: t loop variable
# return: ch$ string of key that was pressed
# return: ch apple-ascii value of that key

ch$=""
:ch=`ZERO

for t=`ZERO to `INF
ti=ti+`ONE
:if ts and ti>=ts then ti=ti-ts
:color=9
:plot tx,`ZERO
:tx=tx+`ONE
:if tx=40 then return

if peek(ky)<k8 then next
get ch$
:ch = asc(ch$)
:return

#----------
@draw_hose
'--- Draw colored hose
# arg: bi bar index from 0 to w+h-1
# arg: bx(),by()   pre-calculated plot coordinates for hose
# keep: bp previous bar index
# use: t temporary value

#do not check bp; that would prevent @select_color from working properly
#if bi=bp then return

gosub @clear_hose

:bp=bi
:color=c(ci)

:t=bi+bi
:plot bx(t),by(t)
:t=t+`ONE
:plot bx(t),by(t)
:return

#----------
@clear_hose
'--- Clear hose
# arg: bp previous bar index from 0 to w+h-1
# arg: bx(),by()   pre-calculated plot coordinates for hose
# use: t temporary value

color=15
:t=bp+bp
:plot bx(t),by(t)

:color=`ZERO
:t=t+`ONE
:plot bx(t),by(t)

:return

#----------
@aim_left
'--- Aim hose
# keep: bi bar index
# arg: w,h GR rect dimensions

bi=bi-`ONE
:if bi<`ZERO then bi=w+h-`ONE
goto @draw_hose
# 'goto N' = 'gosub N:return'

@aim_right
bi=bi+`ONE
:if bi=w+h then bi=`ZERO
goto @draw_hose
# 'goto N' = 'gosub N:return'

#----------
@draw_bar
'--- Draw a single bar
# arg: bi  bar number from 0 to w+h-1
#   0..w-1 are vlin, remainder are hlin
# arg: ci  color index
# arg: x,y,w,h GR rect coords

color=c(ci)
if bi<w then vlin y,y+h*2 at `ONE+x+bi*2
:return
hlin x,x+w*2 at `ONE+y+(bi-w)*2
:return


#-------------------------------------
# MAIN GAME MODES
#-------------------------------------

#----------
@main
'--- Main routine
t=`ONE
:gosub @welcome
print
:print "Preparing the kitchen..."
:gosub @init_data

@@menu_loop
t=`ZERO
:gosub @welcome
gosub @menu
goto @@menu_loop

#----------
@welcome
'--- Welcome
text
:home
t$=t2$:gosub @print_centered
t$=t3$:gosub @print_centered
print
t$=t4$:gosub @print_centered
if t then flash
t$=t1$:gosub @print_centered:normal
t$=t4$:gosub @print_centered
return

#----------
@menu
'--- Main menu
print
print " View the [D]emo"
print " Take the [T]utorial"
print " Play the [P]rogression challenge"
print " Practice [S]pecific weaves"
print
print " Where to? ";
@@menu_input
get ch$

if asc(ch$)=27 then end
:rem esc

if ch$="D" then gosub @demo
:return

if ch$="T" then gosub @tutorial
:return

if ch$="S" then gosub @practice
:return

if ch$="P" then gosub @challenge
:return

goto @@menu_input


#----------
@demo
'--- Demo loop
# use: ci,bi current color and bar indices
# use: i loop index
# use: t temporary value

### - Setup

w=5
:h=6
:cn=7
:ts=`ZERO

t=rnd(seed):rem predictable sequence
gosub @setup_goal

vtab 21
:print "Choose a flavor,  "
print "aim the candy hose,";
:htab 28:print "---DEMO---"
print "lay stripes, until the";
:htab 28:print "Press a key"
print "entire pattern matches";
:htab 29:print "to return";

### - Main loop

ti=30
@@demo_loop
for j=`ZERO to mn-1
if j=13 then gosub @reveal_diffs
:gosub @reveal_diffs
:gosub @reveal_diffs

for i=`ONE to ti*3
if peek(ky)>=k8 then get ch$
:return

if i<>ti*1 then @@demo_end_color
if ci<>mc(j) then ci=mc(j)
:gosub @select_color
:gosub @draw_hose
@@demo_end_color

if i<>ti*2 then @@demo_end_aim
if bi<>mb(j) then bi=mb(j)
:gosub @draw_hose
@@demo_end_aim

if i<>ti*3 then @@demo_end_stripe
gosub @draw_bar
@@demo_end_stripe

next i
:next j

# clear work area, restart demo sequence
color=0
:for i=y to y+h*2
:hlin x,x+w*2 at i
:next
goto @@demo_loop


#----------
@tutorial
'--- Tutorial

ap=ax
:ax=`ZERO

w=3
:h=3
:cn=6
:ts=`ZERO
:tx=`ZERO
x=9-w
:y=20-h
:wh=w*h
:m=wh
:gosub @init_check

gr
:home
print "Welcome to the wonderful world of"
print "candy weaving!"
gosub @key_continue

@@tutorial_generate
t=rnd(seed)

home
:gosub @draw_border
:gosub @gen_palette
:gosub @draw_patch
print "Above, on the left, you will see"
print "a tasty target pattern."
#print "seed ";seed
gosub @key_continue
#if ch$="r" then seed=seed-1
#:goto @@tutorial_generate

home
:x=x+20
:gosub @draw_border
print "On the right, you will lay candy"
print "stripes one at a time until your"
print "whole pattern matches the target."
gosub @key_continue

home
print "First: select"
gosub @draw_color_palette
print "a flavor of candy"
print "by pressing its number";

@@tutorial_color
gosub @input_key
:if ch=27 then return
:rem esc
ci=ch-49
:if ci<`ZERO or ci>=cn then @@tutorial_color

home
:gosub @draw_color_palette
:cp=not ci
:gosub @select_color
print "Next: press the right arrow"
print "to see how the candy hose moves."
bp=`ONE
:bi=`ZERO
:gosub @init_hose
:gosub @draw_hose

t$="Keep going until it turns the corner..."
@@tutorial_aim
gosub @input_key
:if ch=27 then return
:rem esc
if ch<>21 then @@tutorial_aim
if bi=2 then t$="Keep going until it passes the end..."
vtab 24
:htab `ONE
:print t$;
gosub @aim_right
:if bi<>`ZERO then @@tutorial_aim

home
:gosub @draw_color_palette
:cp=not ci
:gosub @select_color
print "Use left and right arrows to aim, then"
print "Press space to lay down a candy stripe."

@@tutorial_stripe
gosub @input_key
:if ch=27 then return
:rem esc
if ch=11 or ch=8 then gosub @aim_left
if ch=10 or ch=21 then gosub @aim_right
if ch<>32 then @@tutorial_stripe
:rem space
gosub @draw_bar

home
print "Continue laying"
print "candy stripes until"
print "the patterns match exactly"
gosub @draw_color_palette
:cp=not ci
:gosub @select_color

@play_tutorial
'--- Tutorial play loop
gosub @input_key
:if ch=27 then return
:rem esc

if ch=11 or ch=8 then gosub @aim_left
:goto @play_tutorial
:rem left

if ch=10 or ch=21 then gosub @aim_right
:goto @play_tutorial
:rem right

if ch=32 or ch=13 then @@tutorial_bar
:rem space, return

t=ch-49
:rem 1-9
if t<`ZERO or t>=cn then @play_tutorial

ci=t
:gosub @select_color
:gosub @draw_hose
:goto @play_tutorial

@@tutorial_bar
gosub @draw_hose
:gosub @draw_bar

gosub @check_match
:if m then @play_tutorial

gosub @clear_hose
vtab 24
:inverse
#:print "Congratulations!";
:print "I say; well done!";
:normal
:gosub @key_continue

ax=ap
return


#----------
@practice
'--- Practice Menu
# arg: t$ the string to center
# use: s() for temporary values

vtab 13
:htab `ONE
print "  Width (2-8): ";w
print " Height (2-9): ";h
print "Flavors (2-9): ";cn
print "  Timer (0-9): ";tv
print
htab 10:print "[Space] to begin"
htab 10:print "[ESC]   to cancel"
s(0)=w
:s(1)=h
:s(2)=cn
:s(3)=tv
:ts=`ZERO
:tx=`ZERO
i=`ZERO

@@practice_menu_mark_cursor
vtab 13+i
:htab 16
:inverse
:print s(i);
:normal

@@practice_menu_input
gosub @input_key
if ch=27 then return
:rem esc
if ch=32 then @@setup_practice
:rem space
if ch=13 then ch=s(i)+48
:rem return key

n=ch-48
:rem "0"
if n<(2 * (i<>3)) or n>(wm + (i<>`ZERO)) then @@practice_menu_input

s(i)=n
# unmark old cursor
htab 16
:print s(i)
i=i+`ONE
:if i>3 then i=`ZERO

goto @@practice_menu_mark_cursor

@@setup_practice
w=s(0)
:h=s(1)
:cn=s(2)
:tv=s(3)
:ts=ta(tv)
:gosub @seed_rnd

@practice_round
'--- Play a practice round
gosub @setup_goal
:gosub @draw_help
gosub @play_game
:if tx=-1 then return

vtab 24
:htab 24
:print "Another round?";
@@practice_again
get ch$
if ch$="Y" or ch=13 then @practice_round
if ch$="N" or ch=27 then return
goto @@practice_again


#----------
@challenge
'--- Play challenge waves

gosub @seed_rnd

for r=`ZERO to dn-`ONE
w=dw(r)
:h=dh(r)
:cn=dc(r)
:ts=dt(r)

home
:print ds$(r);
:gosub @key_continue

if not ts then @@setup_board
home
:flash
:vtab 22
t$="*** Timed Round! ***"
:gosub @print_centered
normal
:gosub @key_continue

@@setup_board
gosub @setup_goal
:gosub @draw_help
gosub @play_game
:if tx=-1 then return

if tx<>40 then @@next_round
#print "final score: ";m
print "Keep practicing, you can do it!"
print
:htab 27
:print "Press ESC";
:ts=0
@@challenge_fail
gosub @reveal_diffs
:if peek(ky)>=k8 then gosub @input_key
if ch<>27 then @@challenge_fail
return

@@next_round
gosub @key_continue
next


# Challenge complete
gr
:home
inverse
:t$="Congratulations!":gosub @print_centered
:normal
print "The celebration lasts for days, and"
print "showers our champion with candy praise"
print "(press space to rest on your laurels)";

@@victory
if peek(ky)>=k8 then get ch$
:return

color=rnd(1)*14+1
:t=int(rnd(1)*19)*2+1

if rnd(1)<.5 then @@victory_2
hlin `ZERO,38 at t
:goto @@victory

@@victory_2
vlin `ZERO,38 at t
:goto @@victory


#----------
@play_game
'--- Main game loop
# use: c$ keyboard input
# use: ci color index
# use: bi bar index, @draw_bar
# use: t temporary value

for q=`ZERO to `INF

gosub @input_key
ti=ti+7
if tx=40 then @@play_timeout

if ch=27 then @@ask_abort
:rem esc

if ch=11 or ch=8 then gosub @aim_left
:ti=ti+2
:next q
:rem left

if ch=10 or ch=21 then gosub @aim_right
:ti=ti+2
:next q
:rem right

if ch=32 or ch=13 then @@play_bar_current
:rem space, return

if ch=84 then ti=ti+4
:ax=not ax
:gosub @draw_help
:next q
:rem toggle labels

if ch=82 then gosub @reveal_diffs
:next q
:rem reveal diffs

t=ch-49
:rem 1-9
if t>=`ZERO and t<cn then @play_color

t=ch-65
:rem A-Q
if t>=`ZERO and t<w then @play_bar
t=t-wm
:if t>=`ZERO and t<h then t=t+w
:goto @play_bar

next q
:rem other


@play_color
'- choose color
ti=ti+4
:ci=t
:gosub @select_color
:gosub @draw_hose
:next q

@play_bar
'- choose line
bi=t
:ti=ti+5
:gosub @draw_hose

@@play_bar_current
# 2x2 ti += 7
# 8x9 ti += 57
ti=ti+3+(w*h*3/4)
gosub @draw_bar
vtab 24
:htab `ONE
:call(`ERASE_LINE)
:print "Comparing...      ";
:htab `ONE
:gosub @check_match

if m then print "progress: ";m;" to go ";
:htab 24
:print "[R]eveal diffs";
:next q

#else
gosub @clear_hose
t=rnd(`ONE)*3
:inverse
if t<1 then print "A perfect match!";
:goto @@round_over
if t<2 then print "Yes! Delicious!";
:goto @@round_over
print "Completed! (Yum)";
:goto @@round_over

@@ask_abort
gosub @draw_abort
@@input_abort
gosub @input_key
if tx=40 then @@play_timeout
if ch=78 or ch=27 then gosub @draw_help
:ti=ti+3
:next q
:rem [N]o
if ch=89 then tx=-1
:home
:goto @@round_over
:rem [Y]es
if ch=83 then return
:rem debug [S]kip
ti=ti+3
:goto @@input_abort

@@play_timeout
home
:flash
:print "Out of time!"

@@round_over
normal
:return


#-------------------------------------
# LOWER-PERFORMANCE SUBROUTINES
#-------------------------------------

#----------
@declare_vars
'--- Declare variables

'- constants
z=0
:u=1
ky=49152:rem peek KEYBOARD
k8=128
e=-868:rem call ERASE_LINE
f=1e30:rem infinity
# BASIC mantissa loses precision around 1e10; adding 1 no longer increases the value.
# Limit of representation is around 1e38. I chose 1e30 as a safe "infinite" ceiling.

'- performance-critical variables
# for @check_match
m=`ZERO
:i=`ZERO
:o=-20
:j=`ZERO
:a=`ZERO
:w2=`ZERO
:x=`ZERO
:y=`ZERO
:j0=`ZERO
:j1=`ZERO
:wh=9
:w=3
:h=3

cn=6
tv=`ZERO
# axis labels visible
ax=`ZERO

# width-max
wm=8

# predictable rnd() sequence for tutorial
# Some seeds I liked:
# -2,-7,-15,-18,-22,-25,-34,-46,-53,-55,-62,-76,-90,-97,-108,-131,-153,-170,-179,-182,-222
seed=-222

dim ro(24):rem gr mem addr by row
dim bx(33),by(33):rem hose coordinates
dim c(15):rem color palette
dim s(25):rem shuffle sequence
dim cc(15*5-1):rem color clash table
dim ta(9):rem timer presets
dim dw(30),dh(30),dc(30),dt(30),ds$(30):rem level data
dim mc(30),mb(30):rem demo data

return

#----------
@init_data
'--- Initialize game data

#dim ro(24):rem gr mem addr by row
for i=`ZERO to 7
:for j=`ZERO to 2
:ro(i+8*j)=1024+128*i+40*j
:next j
:next i

#dim ta(9):rem timer presets
for i=`ZERO to 9
:read ta(i)
:next i

gosub @init_palette

#demo data
#dim mc(30),mb(30)
read mn
:for i=`ZERO to mn-`ONE
:read mc(i),mb(i)
:next

#level data
#dim dw(30),dh(30),dc(30),dt(30)
read dn
:for i=`ZERO to dn-`ONE
:read dw(i),dh(i),dc(i),dt(i),ds$(i)
:next

return

#----------
@init_check
'--- Init check variables

j0=(y+`ONE)/2
:j1=j0+h-`ONE
:w2=w*2
return

#----------
@check_match
'--- Check for match
# arg: x,y,w,h GR rect coords
# arg: ro() array of memory address for each row start
# arg: o constant -20 to find "other" pattern area
# return: m number remaining
# use: i,j indices
# use: a  temporary value

m=`ZERO

:for j=j0 to j1
a=ro(j)+x
:for i=a+`ONE to a+w2 step 2
m=m+(peek(i)=peek(i+o))
next
:next j

m=wh-m
return

#----------
@reveal_diffs
'--- Reveal differences
# arg: x,y,w,h GR rect coords
# arg: ro() array of memory address for each row start
# arg: o constant -20 to find "other" pattern area
# use: i,j indices
# use: p  temporary value

for j=j0 to j1
a=ro(j)+x
:for i=a+`ONE to a+w2 step 2

p=peek(i)
:if p=peek(i+o) then @@diff_next
poke(i),255
:for t=`ONE to 200:next
:poke(i),p
if peek(ky)>=k8 then return

@@diff_next
next i
:next j
:return


#----------
@draw_help
'--- Help text

vtab 22
:htab `ONE

if ax then @help_axes
call(`ERASE_LINE)
:print " Aim: left/right";
htab 24
:print "[T]oggle labels"
call(`ERASE_LINE)
:print " Lay candy: Space";
return


@help_axes
# arg: w,h patch size
call(`ERASE_LINE)
:print " Press a letter";

htab x-3
:print "COL:";
for i=`ZERO to w-`ONE
:print " ";chr$(65+i);
:next

print
:call(`ERASE_LINE)
:print " to fast-stripe";

htab 27-h
:print "ROW:";
for i=wm to wm+h-`ONE
:print " ";chr$(65+i);
:next

return


#----------
@draw_abort
'--- Abort prompt

vtab 22
:htab `ONE
:call(`ERASE_LINE)
htab 24
:print "Abandon game?"
call(`ERASE_LINE)
return

#----------
@print_centered
'--- Print Centered
# arg: t$ the string to center

htab 20-len(t$)/2
:print t$
:return

#----------
@key_continue
'--- Prompt to continue
vtab 24
:htab 27
:print "Press space:";
:get ch$
:return

#----------
@seed_rnd
'--- seed "rnd" from human reaction time
# These locations are a 16-byte counter
# incremented by the system during get$
i=rnd(-1*(peek(78)+256*peek(79)))
:return

#----------
@setup_goal
'--- Layout a new weave
# arg: w,h width and height of weave
# arg: cn number of colors
# arg: ts timer speed
# return: x,y position of player's weave
# init: ti timer counter
# init: tx timer x position
# init: ci selected color (index into palette)
# init: cp previously selected color (index)
# init: bi selected bar (stripe index)
# init: bp previously selected bar (index)

# max values allowed:
# w=wm, h=9, cn=9
x=9-w
:y=20-h
:wh=w*h
:m=wh
:gosub @init_check
ti=`ZERO
:tx=`ZERO

# setup_board
gr
:home
:gosub @gen_palette
:gosub @draw_border
:gosub @draw_patch

x=x+20
:gosub @draw_border
home
:print "Available flavors:"
:gosub @draw_color_palette
cp=`ONE
:ci=`ZERO
:gosub @select_color

gosub @init_hose
:bp=`ONE
:bi=`ZERO
:gosub @draw_hose

if ts then color=4
:hlin `ZERO,39 at `ZERO

return

@setup_goal_end
# extra +100 line number increment allows above gosub to
# search forward at runtime instead of from top of file.

#----------
@draw_border
'--- Draw play area border
# arg: x,y,w,h GR rect coords

color=15
hlin x-`ONE,x+w*2+`ONE at y-`ONE
hlin x-`ONE,x+w*2+`ONE at y+h*2+`ONE
vlin y-`ONE,y+h*2+`ONE at x-`ONE
vlin y-`ONE,y+h*2+`ONE at x+w*2+`ONE
return

#----------
@draw_color_palette
'--- Draw color palette
# arg: cn number of colors
# arg: c() array of colors
# use: i index

vtab 21
:htab 20

for i=`ZERO to cn-`ONE
:color=c(i)
:vlin 37,38 at 20+i*2
:print " ";i+`ONE;
:next

print
:return

#----------
@select_color
'--- Show selected color
# arg: ci color index
# keep: cp previous color index

if ci=cp then return
vtab 21

:htab 21+ci*2
:inverse
:print ci+`ONE;

:htab 21+cp*2
:normal
:print cp+`ONE;

cp=ci
:print
:return

#----------
@draw_patch
'--- Draw patch
# arg: x,y,w,h GR rect coords
# use: sn @shuffle
# use: ci color index
# use: bi bar index, @draw_bar
# use: i index

sn=w+h
:gosub @shuffle

ci=`ZERO
for i=`ZERO to w+h-`ONE

:bi=s(i)
:gosub @draw_bar

ci=ci+`ONE
:if ci=cn then ci=`ZERO

next i
gosub @shuffle_colors

return

#----------
@init_palette
'--- Table of clashing colors
# return: cc() table of clashing colors
# use: i,j,k general index
# use: s() temporary 

# Data chosen by visual inspection of @test_color_clash
# in cyanIIde and multiple view modes on AppleWin
# severe: 5,10  7,10  7,11  7,14  10,11
# mild: 1,3  2,4  3,5  3,9  3,10  3,11  5,7  6,14  12,14

#dim cc(15*5-1)
for i=`ZERO to 15
:s(i)=`ZERO
:next

for k=`ONE to 14
read i,j
n=s(i)
:cc(i*5+n)=j
:s(i)=n+`ONE
n=s(j)
:cc(j*5+n)=i
:s(j)=n+`ONE
next k

return

#----------
@gen_palette
'--- Generate color palette
# arg: cn number of colors
# arg: cc() table of clashing colors
# return: c() array of colors
# use: s(),n  shuffling array
# use: ci color index
# use: i,j,k general index
# use: t,a temporary value

m=`ZERO
:vtab 21
:print "Selecting flavors..."

@@palette_attempt
m=m+`ONE
:if m=3 then print "Taste testing for quality..."

# seed the list of eligible colors
for n=`ZERO to 13
:s(n)=n+`ONE
:next

for ci=cn-`ONE to `ZERO step -1
if n<=ci then @@palette_attempt

# random pick
i=rnd(`ONE)*n
k=s(i)
:c(ci)=k
n=n-`ONE
:s(i)=s(n)

# eliminate clashing colors
k=k*5
for j=k to k+4
a=cc(j)
:t=(not a)*n
:if t then j=j+5
for i=t to n-`ONE
if a=s(i) then n=n-`ONE
:s(i)=s(n)
:i=n
next i
next j

@@next_pick
next ci

return

#----------
@shuffle
'--- Create a shuffle 
# arg: sn length of shuffled sequence [1..26]
# use: i,j indices
# use: t temporary value

for i=`ZERO to sn-`ONE
:s(i)=i
:next

for i=sn-`ONE to `ZERO step -1
:j=rnd(`ONE)*i
:t=s(i)
:s(i)=s(j)
:s(j)=t
:next

return

#----------
@shuffle_colors
'--- Shuffle color palette
# arg: cn number of colors
# use: i,j indices
# use: t temporary value

for i=cn-`ONE to `ZERO step -1
:j=rnd(`ONE)*i
:t=c(i)
:c(i)=c(j)
:c(j)=t
:next

return

#----------
@init_hose
'--- Initialize hose coordinates
# arg: x,y,w,h GR rect coords
# return: bx(),by()   pre-calculated plot coordinates for hose
# use: i              loop index
# use: x0,x1,y0,y1,t  temporary values

#dim bx(33),by(33)    max (w+h)*2

y1=y-2
:y0=y1+`ONE
:t=`ONE+x
for i=`ZERO to (w-`ONE)*2 step 2
bx(i)=t
:bx(i+`ONE)=t
by(i)=y0
:by(i+`ONE)=y1
t=t+2
:next

x0=x+w*2+`ONE
:x1=x0+`ONE
:t=`ONE+y
for i=i to (w+h-`ONE)*2 step 2
bx(i)=x0
:bx(i+`ONE)=x1
by(i)=t
:by(i+`ONE)=t
t=t+2
:next

return


#-------------------------------------
# TESTS
#-------------------------------------

{color_test
#----------
@test_color_clash
dim ct(39)
i=0

for c1=1 to 13
for c2=c1+1 to 14

# draw interleaved band of c1|c2|c1|c2
if i=0 then gr:home
print c1;" ";c2;"  ";
ct(i*5+1)=c1
ct(i*5+2)=c2
ct(i*5+3)=c1
ct(i*5+4)=c2
i=i+1

if i<8 then @@test_next_color
for i=0 to 39
:color=ct(i)
:vlin 0,39 at i
:next
gosub @key_continue
i=0

@@test_next_color
next c2
next c1

for j=0 to i*5
:color=ct(j)
:vlin 0,39 at j
:next
end

}color_test


{unit_test

#----------
@test_shuffle
sn=4
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn=16
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn=1
gosub @shuffle:gosub @print_shuffle
#sn=0
#gosub @shuffle:gosub @print_shuffle
return
@print_shuffle
for i=0 to sn-1
:print(s(i));" ";
:next
:print
:return

#----------
@test_row
poke ro(0),242
poke ro(0)+39,42
poke ro(1)+1,242
poke ro(2)+38,42
poke ro(8),242
poke ro(8)+39,42
poke ro(9)+1,242
poke ro(10)+38,42
poke ro(19),242
poke ro(19)+39,42
return

#----------
@print_color_clash
print "color clash table"
for i=0 to 14
print i;": ";
for j=0 to 4
print cc(i*5+j);" ";
next j
print
next i
return

#----------
@test_color_palette
cn=9
for tt=1 to 10
:gosub @gen_palette
:print cn,tt
:next tt
return

}unit_test


#-------------------------------------
# GAME DATA
#-------------------------------------
@data

'- timer presets
data 0,90,80,70,60,50,40,30,20,10

'- clashing color pairs
data 5,10 , 7,10 , 7,11 , 7,14 , 10,11
data 1,3 , 2,4 , 3,5 , 3,9 , 3,10 , 3,11 , 5,7 , 6,14 , 12,14

'- demo sequence
data 22
data 4,6 , 2,10 , 3,3 , 3,0, 0,0
data 6,9 , 4,1 , 1,5 , 6,7 , 2,7
data 3,8 , 0,4 , 5,2
data 1,5 , 6,9 , 4,1 , 2,7 , 3,8
data 0,4 , 0,4 , 0,4 , 0,4

'- campaign sequence
data 25

# WAVE 1
data 5,3,6,0,"Meet Mr. Wyde-Lowe, the local dandy.    Sideways is how he likes his candy!"
data 6,3,6,0,"A very good start. But now he wants moreso make him a wider one than before.
data 7,3,6,0,"Wider! Wider! And wider still!          Surely then he will have his fill."
data 4,3,6,70,"For dear Mr. Wyde-Lowe, a final request:A quick little one to give to his guest."

# WAVE 2
data 3,4,6,0,"The Lady Hightower is rather impressed. Can you make a tall one unlike the rest?"
data 3,6,6,0,"Not a bad start, but she has in mind    A weave of the taller and tallerer kind!"
data 3,8,6,0,"Splendid! This candy delights her so.   She wonders aloud, how high can you go?"
data 3,4,6,70,"The lady has suddenly one final thought:A gift for my nephew! I almost forgot."

# WAVE 3
data 5,5,5,0,"Dismay! Nephew Squarejaw cannot abide   lopsided candy too long on one side."
data 6,6,6,0,"Squarejaw's gaze remains rather tough.  That weave was simply not big enough."
data 7,7,7,0,"Greedy desires now show in his grin;    Bigger and bigger ones lift up his chin!"
data 4,4,4,60,"Cracking his knuckles, Squarejaw dares: how fast can you assemble these squares?"

# WAVE 4
data 8,4,9,0,"The Rainbow Twins rush up with demands. Ferrari: a low one made by your hands!"
data 4,8,9,0,"The twins can never seem to agree.      Rocket: a towering candy for me!"
data 4,4,8,40,"Their tempers erupt over which is best. Make them a compromise! Put it to rest!"

# WAVE 5
data 8,6,2,0,"Pacified, they have a riddle for you.   Do you know how to make one with two?"
data 6,9,2,0,"By now you probably know what is next.  Flip it on end before we get vexed!"
data 8,9,2,0,"To finish off the riddle we've spun:    Do both shapes together; two into one."
data 5,6,2,90,"Leader McGrimly now begs for your skillson a serious task. Work fast, no frills!"

# WAVE 6
data 7,8,5,0,"Our candy dome is under attack!         Make a big net so we can fight back."
data 7,8,7,0,"The Sweet-Tooth, alas, evaded our net.  We need to weave in more flavors, I bet."
data 7,8,9,0,"Use all the flavors, spare no expense!  Our situation is getting intense."
data 5,6,9,60,"Oh no! It ate a big hole in the dome!   Weave like the wind and rescue our home!"
data 3,3,6,20,"Is there no end to this candy disaster? Hurry, scurry! Weave faster and faster!"

# WAVE 7
data 8,9,9,0,"The creature is gone - the day is won!  A victory banner we need; just for fun."
