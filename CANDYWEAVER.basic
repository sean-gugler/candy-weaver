'Copyright 2022 by Sean Gugler
'licensed under CC BY-NC-SA 4.0

t1$="Candy Weaver"
t2$="v0.0.3 2022-08-10"
t3$="by Sean Gugler"
t4$="-----------------"


#gosub @test_shuffle:end

gosub @init_vars
gosub @welcome

gr
#gosub @test_row:end

# max values allowed:
# w=9, h=9, cn%=9

w=6
:h=8
:x=4
:y=16

cn%=5
:gosub @gen_palette
gosub @draw_patch

x=x+20
:gosub @draw_game_menu
cp%=1
:ci%=0
:gosub @select_color

gosub @play_game

end


#----------
@welcome
'--- Welcome
text
:home
t$=t2$:gosub @print_centered
t$=t3$:gosub @print_centered
print
t$=t4$:gosub @print_centered
t$=t1$:gosub @print_centered
t$=t4$:gosub @print_centered
print
print "Weave your candy stripes on the right"
print "to match the pattern on the left."
print
print "Roll up your sleeves; here we go! ";

get ch$
i=rnd(-1*(peek(78)+256*peek(79))):rem seed from human reaction time
return


#----------
@print_centered
'--- Print Centered
# arg: t$ the string to center

htab 20-len(t$)/2
:print t$
:return


#----------
@init_vars
'--- Initialize variables
dim c(15)
dim s(25)

dim ro(24):rem gr mem addr by row
for n=0 to 7
:for m=0 to 2
:ro(n+8*m)=1024+128*n+40*m
:next m
:next n

return

#----------
@draw_game_menu
'--- Draw game menu
# arg: w,h patch size
# use: i index
home

:print "Choose a flavor:";
:htab 20
for i=0 to cn%-1
:color=c(i)
:vlin 37,38 at 20+i*2
:print " ";i+1;
:next
print

print "Lay a candy stripe:"
:htab x-h*2
:print "(";
for i=0 to h-1
:if i>0 then print " ";
print chr$(65+i);
:next
:print ")";
for i=h to w+h-1
:print " ";chr$(65+i);
:next

return

#----------
@select_color
'--- Activate a color
# arg: ci% color index
# keep: cp% previous color index

if ci%=cp% then return
vtab 21

:htab 21+ci%*2
:inverse
:print ci%+1;

:htab 21+cp%*2
:normal
:print cp%+1;

:color=c(ci%)
cp%=ci%
:return

#----------
@play_game
'--- Main game loop
# use: c$ keyboard input
# use: ci% color index
# use: bi bar index, @draw_bar
# use: i index

wait 49152,128
:get ch$
ch = asc(ch$)

if ch=27 then return
:rem ESC

ci%=ch-49
:rem 1-9
if ci%>=0 and ci%<cn% then @@play_color

bi=ch-65
:rem A-Z
if bi>=0 and bi<w+h then @@play_bar

goto @play_game
:rem other

@@play_color
'- choose color
gosub @select_color
:goto @play_game

@@play_bar
'- choose line
gosub @draw_bar
gosub @check_match
if ma% then print ma%;" more     ";
:goto @play_game

print "Confection complete! Yum!";
return

#----------
@check_match
'--- Check for match
# arg: bi bar number
# return: ma% number remaining
# use: n% match count at this bi

vtab 24
:htab 1
:print "Comparing...";
:htab 1

ma%=0

y2=y/2
:for j=y2 to y2+h-1
a=ro(j)+x
:for i=a+1 to a+(w*2) step 2
ma%=ma%+(peek(i)=peek(i-20))
next i
:next j

ma%=(w*h-ma%)
return

#----------
@shuffle
'--- Create a shuffle 
# arg: sn% length of shuffled sequence [1..26]
# use: i,j indices
# use: t temp value

for i=0 to sn%-1
:s(i)=i
:next

for i=sn%-1 to 0 step -1
:j=rnd(1)*i
:t=s(i)
:s(i)=s(j)
:s(j)=t
:next

return

#----------
@gen_palette
'--- Generate color palette
# arg: cn number of colors
# use: ci color index
# use: sn%, @shuffle
# use: i shuffle index, to skip colors that are hard to distinguish
# use: t temp value

sn%=16
:gosub @shuffle

i=0
:for ci=0 to cn%-1

@@reject_color
t=s(i)
:i=i+1
:if t=0 or t=3 or t=5 or t=10 then @@reject_color

c(ci)=t
:next
:return

#----------
@draw_patch
'--- Draw patch
# arg: x,y,w,h GR rect coords
# use: sn% @shuffle
# use: ci% color index
# use: bi bar index, @draw_bar
# use: i index

sn%=w+h
:gosub @shuffle

ci%=0
for i=0 to w+h-1

color=c(ci%)
:bi=s(i)
:gosub @draw_bar

ci%=ci%+1
:if ci%=cn% then ci%=0

next i

return

#----------
@draw_bar
'--- Draw a single bar
# arg: bi  bar number from 0 to w+h-1
# 0..h-1 are hlin, remainder are vlin

if bi<h then hlin x,x+w*2 at 1+y+bi*2
:return
vlin y,y+h*2 at 1+x+(bi-h)*2
:return



#----------
@test_shuffle
sn%=4
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=16
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=1
gosub @shuffle:gosub @print_shuffle
#sn%=0
#gosub @shuffle:gosub @print_shuffle
return
@print_shuffle
for i=0 to sn%-1
:print(s(i));" ";
:next
:print
:return

#----------
@test_row
poke(ro(0),242)
poke(ro(0)+39,42)
poke(ro(1)+1,242)
poke(ro(2)+38,42)
poke(ro(8),242)
poke(ro(8)+39,42)
poke(ro(9)+1,242)
poke(ro(10)+38,42)
poke(ro(19),242)
poke(ro(19)+39,42)
return
