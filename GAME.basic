'Game by Sean Gugler
dim c(15)
dim s(25)
dim m%(25)

dim ro(24):rem gr mem addr by row
for n=0 to 7
:for m=0 to 2
:ro(n+8*m)=1024+128*n+40*m
:next m
:next n

#gosub @test_shuffle:end


gr
#gosub @test_row:end

w=3
:h=4
:x=4
:y=16

cn%=3
:gosub @gen_palette
gosub @draw_patch

x=x+20
:gosub @draw_game_menu
gosub @init_match
gosub @play_game

end


#----------
@draw_game_menu
# arg: w,h patch size
# use: i index
home

:print "Choose color:";
:htab 20
for i=0 to cn%-1
:color=c(i)
:vlin 37,38 at 20+i*2
:print " ";i+1;
:next
print

print "Draw line:"
:htab x-h*2
:print "(";
for i=0 to h-1
:if i>0 then print " ";
print chr$(65+i);
:next
:print ")";
for i=h to w+h-1
:print " ";chr$(65+i);
:next

return

#----------
@play_game
# use: c$ keyboard input
# use: ci% color index
# use: bi bar index, @draw_bar
# use: i index

wait 49152,128
:get ch$
ch = asc(ch$)

if ch=27 then return
:rem ESC

ci%=ch-49
:rem 1-9
if ci%>=0 and ci%<cn% then @play_color

bi=ch-65
:rem A-Z
if bi>=0 and bi<w+h then @play_bar

goto @play_game
:rem other

'choose color
@play_color
color=c(ci%)
:goto @play_game

'choose line
@play_bar
gosub @draw_bar
gosub @check_match
if ma%<>w*h*2 then @play_game

print "complete match!";
return

#----------
@init_match
'Clear match vars
ma%=0
for i=0 to w+h-1
:m%(i)=0
:next
return

#----------
@check_match
'Check for match
# arg: bi bar number
# keep: ma% total match count
# keep: m% match per bi
# use: n% match count at this bi

vtab 24:htab 1:print "       ";
htab 1:print ma%;" ";

ma%=ma%-m%(bi)
n%=0

if bi<h then
:i0=x+1
:i1=x+(w*2)
:j0=bi
:j1=bi
:goto @peek_match
# else
i0=x+1+(bi-h)*2
:i1=i0
:j0=0
:j1=h-1
@peek_match
for i=i0 to i1 step 2
:for j=j0 to j1
a=ro(y/2+j)

p=peek(a+i)
:poke a+i,255
for k=0 to 100
:next k
poke a+i,p

n%=n%+(peek(a+i)=peek(a+i-20))
next j
:next i

# #horiz
# a=ro(y/2+bi)
# for i=x+1 to x+(w*2) step 2
# n%=n%+(peek(a+i)=peek(a+i-20))
# next
# 
# #vert
# i=x+1+(bi-h)*2
# for j=0 to h-1
# a=ro(y/2+j)
# n%=n%+(peek(a+i)=peek(a+i-20))
# next

m%(bi)=n%
ma%=ma%+n%

print ma%;" ";

return

#----------
@shuffle
'Create a shuffle 
# arg: sn% length of shuffled sequence [1..26]
# use: i,j indices
# use: t temp value

for i=0 to sn%-1
:s(i)=i
:next

for i=sn%-1 to 0 step -1
:j=rnd(1)*i
:t=s(i)
:s(i)=s(j)
:s(j)=t
:next

return

#----------
@gen_palette
'Generate color palette
# arg: cn number of colors
# use: ci color index
# use: sn%, @shuffle

sn%=15
:gosub @shuffle

for ci=0 to cn%-1
#:c(ci)=rnd(1)*15+1
:c(ci)=s(ci)+1
:next
:return

#----------
@draw_patch
'Draw patch
# arg: x,y,w,h GR rect coords
# use: sn% @shuffle
# use: ci% color index
# use: bi bar index, @draw_bar
# use: i index

sn%=w+h
:gosub @shuffle

ci%=0
for i=0 to w+h-1

color=c(ci%)
bi=s(i)
gosub @draw_bar

ci%=ci%+1
:if ci%=cn% then ci%=0

next i

return

#----------
@draw_bar
'Draw a single bar
# arg: bi  bar number from 0 to w+h-1
# 0..h-1 are hlin, remainder are vlin

if bi<h then hlin x,x+w*2 at 1+y+bi*2
:return
vlin y,y+h*2 at 1+x+(bi-h)*2
:return



#----------
@test_shuffle
sn%=4
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=16
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
gosub @shuffle:gosub @print_shuffle
sn%=1
gosub @shuffle:gosub @print_shuffle
#sn%=0
#gosub @shuffle:gosub @print_shuffle
return
@print_shuffle
for i=0 to sn%-1
:print(s(i));" ";
:next
:print
:return

#----------
@test_row
poke(ro(0),242)
poke(ro(0)+39,42)
poke(ro(1)+1,242)
poke(ro(2)+38,42)
poke(ro(8),242)
poke(ro(8)+39,42)
poke(ro(9)+1,242)
poke(ro(10)+38,42)
poke(ro(19),242)
poke(ro(19)+39,42)
return
